// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: priceService.proto

package handlers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceClient is the client API for Price service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceClient interface {
	GetPriceStream(ctx context.Context, in *GetPriceStreamRequest, opts ...grpc.CallOption) (Price_GetPriceStreamClient, error)
}

type priceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceClient(cc grpc.ClientConnInterface) PriceClient {
	return &priceClient{cc}
}

func (c *priceClient) GetPriceStream(ctx context.Context, in *GetPriceStreamRequest, opts ...grpc.CallOption) (Price_GetPriceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Price_ServiceDesc.Streams[0], "/priceService.Price/GetPriceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceGetPriceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Price_GetPriceStreamClient interface {
	Recv() (*GetPriceStreamResponse, error)
	grpc.ClientStream
}

type priceGetPriceStreamClient struct {
	grpc.ClientStream
}

func (x *priceGetPriceStreamClient) Recv() (*GetPriceStreamResponse, error) {
	m := new(GetPriceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceServer is the server API for Price service.
// All implementations must embed UnimplementedPriceServer
// for forward compatibility
type PriceServer interface {
	GetPriceStream(*GetPriceStreamRequest, Price_GetPriceStreamServer) error
	mustEmbedUnimplementedPriceServer()
}

// UnimplementedPriceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceServer struct {
}

func (UnimplementedPriceServer) GetPriceStream(*GetPriceStreamRequest, Price_GetPriceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPriceStream not implemented")
}
func (UnimplementedPriceServer) mustEmbedUnimplementedPriceServer() {}

// UnsafePriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServer will
// result in compilation errors.
type UnsafePriceServer interface {
	mustEmbedUnimplementedPriceServer()
}

func RegisterPriceServer(s grpc.ServiceRegistrar, srv PriceServer) {
	s.RegisterService(&Price_ServiceDesc, srv)
}

func _Price_GetPriceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPriceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServer).GetPriceStream(m, &priceGetPriceStreamServer{stream})
}

type Price_GetPriceStreamServer interface {
	Send(*GetPriceStreamResponse) error
	grpc.ServerStream
}

type priceGetPriceStreamServer struct {
	grpc.ServerStream
}

func (x *priceGetPriceStreamServer) Send(m *GetPriceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Price_ServiceDesc is the grpc.ServiceDesc for Price service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Price_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priceService.Price",
	HandlerType: (*PriceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPriceStream",
			Handler:       _Price_GetPriceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "priceService.proto",
}

// PriceStreamingClient is the client API for PriceStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceStreamingClient interface {
	HighLoadStream(ctx context.Context, in *GetPriceStreamRequest, opts ...grpc.CallOption) (PriceStreaming_HighLoadStreamClient, error)
}

type priceStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceStreamingClient(cc grpc.ClientConnInterface) PriceStreamingClient {
	return &priceStreamingClient{cc}
}

func (c *priceStreamingClient) HighLoadStream(ctx context.Context, in *GetPriceStreamRequest, opts ...grpc.CallOption) (PriceStreaming_HighLoadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceStreaming_ServiceDesc.Streams[0], "/priceService.PriceStreaming/HighLoadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceStreamingHighLoadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceStreaming_HighLoadStreamClient interface {
	Recv() (*GetPriceStreamResponse, error)
	grpc.ClientStream
}

type priceStreamingHighLoadStreamClient struct {
	grpc.ClientStream
}

func (x *priceStreamingHighLoadStreamClient) Recv() (*GetPriceStreamResponse, error) {
	m := new(GetPriceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceStreamingServer is the server API for PriceStreaming service.
// All implementations must embed UnimplementedPriceStreamingServer
// for forward compatibility
type PriceStreamingServer interface {
	HighLoadStream(*GetPriceStreamRequest, PriceStreaming_HighLoadStreamServer) error
	mustEmbedUnimplementedPriceStreamingServer()
}

// UnimplementedPriceStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedPriceStreamingServer struct {
}

func (UnimplementedPriceStreamingServer) HighLoadStream(*GetPriceStreamRequest, PriceStreaming_HighLoadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HighLoadStream not implemented")
}
func (UnimplementedPriceStreamingServer) mustEmbedUnimplementedPriceStreamingServer() {}

// UnsafePriceStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceStreamingServer will
// result in compilation errors.
type UnsafePriceStreamingServer interface {
	mustEmbedUnimplementedPriceStreamingServer()
}

func RegisterPriceStreamingServer(s grpc.ServiceRegistrar, srv PriceStreamingServer) {
	s.RegisterService(&PriceStreaming_ServiceDesc, srv)
}

func _PriceStreaming_HighLoadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPriceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceStreamingServer).HighLoadStream(m, &priceStreamingHighLoadStreamServer{stream})
}

type PriceStreaming_HighLoadStreamServer interface {
	Send(*GetPriceStreamResponse) error
	grpc.ServerStream
}

type priceStreamingHighLoadStreamServer struct {
	grpc.ServerStream
}

func (x *priceStreamingHighLoadStreamServer) Send(m *GetPriceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PriceStreaming_ServiceDesc is the grpc.ServiceDesc for PriceStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priceService.PriceStreaming",
	HandlerType: (*PriceStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HighLoadStream",
			Handler:       _PriceStreaming_HighLoadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "priceService.proto",
}
